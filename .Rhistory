source('~/GitHub/R-coding-master/changing functions for exp and gp.R', echo=TRUE)
source('~/GitHub/R-coding-master/changing functions for exp and gp.R', echo=TRUE)
source('~/GitHub/R-coding-master/changing functions for exp and gp.R', echo=TRUE)
library(fitdistrib)
source('~/GitHub/R-coding-master/changing functions for exp and gp.R', echo=TRUE)
source('~/GitHub/R-coding-master/10 fold cross validation test 1.R', echo=TRUE)
source('~/GitHub/R-coding-master/10 fold cross validation test 1.R', echo=TRUE)
source('~/GitHub/R-coding-master/10 fold cross validation test 1.R', echo=TRUE)
source('~/GitHub/R-coding-master/10 fold cross validation test 1.R', echo=TRUE)
install.packages("devtools")
library(devtools)
install_github("NVE/fitdistrib")
install.packages('shiny')
library(shiny)
install.packages("glogis")
install.packages("tibble")
install.packages("rlang")
install_github("NVE/FlomKart_ShinyApp")
install_github("NVE/FlomKart")
install.packages("plotrix")
install_github("Simnorh/FlomKart")
install.packages('addtable2plot')
install.packages("reshape2")
install.packages ("haven")
install.packages("tidyverse")
library(tidyverse)
library (reshape2)
library(FlomKartShinyApp)
library(fitdistrib)
library(nsRFA)
library(FlomKart)
library(evd)
library(plotrix)
source('~/GitHub/R-coding-master/changing functions for exp and gv.R', echo=TRUE)
source('~/GitHub/R-coding-master/changing functions for exp and gv.R', echo=TRUE)
testriver$flood.1
parest$estimate
source('~/GitHub/R-coding-master/changing functions for exp and gv.R', echo=TRUE)
gofkstest <- gof_ks(testriver$flood.1,
parest$estimate,
distr = "gp",
test.stat = TRUE,
p.value = FALSE)
plotall (testriver$daily_ams.1,
GOF.list = NULL,
param = parest2,
distr = "gev",
method = "ad")
plotecdf(testriver$flood.1, parest, distr = "gp")
plotecdf(testriver$flood.1, c(parest[2],parest[1],parest[3] ), distr = "gp")
plotecdf(testriver$flood.1, c(parest[3],parest[1],parest[2] ), distr = "gp")
plotecdf(testriver$flood.1, c(parest[3],parest[2],parest[1] ), distr = "gp")
source('~/GitHub/R-coding-master/changing functions for exp and gv.R', echo=TRUE)
plotecdf(testriver$flood.1, c(parest[1],parest[2],parest[3] ), distr = "gp")
plotecdf(testriver$flood.1, c(parest[1],parest[2],parest[3] ), distr = "gp")
gp_Lmom <- function(dat) {
param <- list(estimate = c(NA, NA, NA), se = c(NA, NA, NA))
if (length(dat) >= 1) {
dat.Lmom <- Lmoments(dat)
fail_safe <- failwith(NULL, par.genpar)
fitted.param <- fail_safe(dat.Lmom[1], dat.Lmom[2], dat.Lmom[4])
if (is.null(fitted.param) == TRUE) {
print("Warning: the function par.GEV failed in gev_Lmom")
invisible(param)
} else {
#fitted.param <- as.numeric(par.GEV(dat.mom[1], dat.mom[2], dat.mom[4]))
# Creating the returning list
param$estimate <- c(fitted.param$xi, fitted.param$alfa, -fitted.param$k)
# Standard error is not yet implemented
invisible(param)
}
} else {
print(paste("Warning: this station has less than ", 1," years of data. Use another method!",
collapse = "", sep = ""))
invisible(param)
}
}
pot_data <-read.table("pot_and_fgp.txt",header=T,sep="\ ")
#ams_data <-read.table("ams_and_fgp.txt",header=T,sep="\ ")
pot_data$station <- paste(pot_data$regine, pot_data$main, sep=".")
#resampled_data <- ams_data[sample(nrow(ams_data)),]
#group_by (resampled_data, station)
testriver <- pot_data[pot_data$station == "2.13", ]
#testplotframe <- as.data.frame(testriver$station)
#colnames(testplotframe)[1] <- "Stations"
#testplotframe <- testplotframe %>% add_count(Stations)
#colnames(testplotframe)[2] <- "years"
#testplotframe <- dplyr::distinct(testplotframe)
set.seed(2661)
resampled_data <- testriver[sample(nrow(testriver)),]
parest <- gp_Lmom(resampled_data$flood.1)
plotecdf(testriver$flood.1, c(parest[1],parest[2],parest[3] ), distr = "gp")
gofkstest <- gof_ks(testriver$flood.1,
parest$estimate,
distr = "gp",
test.stat = TRUE,
p.value = FALSE)
goftest <- data.frame(CS = NA, KS = gofkstest, AD = gofadtest)
plotall (testriver$daily_ams.1,
GOF.list = goftest,
param = parest2,
distr = "gev",
method = "ad")
source('~/GitHub/R-coding-master/changing functions for exp and gv.R', echo=TRUE)
plotecdf(testriver$flood.1, c(parest[1],parest[2],parest[3] ), distr = "gp")
testriver$flood.1
plotdensity(testriver$flood.1, c(parest[1],parest[2],parest[3] ), distr = "gp")
plotdensity(testriver$flood.1, NULL, c(parest[1],parest[2],parest[3] ), distr = "gp")
#10 fold cross validation
# 1. train on 1-9 test 10
# 2. train on 2-10 test 1
# 3. train on 1 + 3-10 test 2
#and so on
ams_data <-read.table("ams_and_fgp.txt",header=T,sep="\ ")
set.seed(123)
#He imports library MASS for his iris dataset
#and caret for cross validation
#library(MASS, quietly=TRUE)
methods(sigma)
install.packages("pbkrtest", dependencies = TRUE)
install.packages("car",dependencies=TRUE)
install.packages("lme4", dependencies = TRUE)
install.packages("caret",dependencies=TRUE)
library(car)
library(lme4)
library(caret)
#Create train and test dataset, target variable ??
library(caTools)
#Storing datasetx into dataframe named dataframe, allows for reusing of coding for every dataset, exchange name of datasetx
DataFrame <- datasetx
#Help datasetx to know more about dataset
help("datasetx")
#check structure of data
str(DataFrame)
#check dimensions of data
dim(DataFrame)
#first 3 row
head(DataFrame,3)
#summary of Data
summary(DataFrame)
#check number of unique values
apply(DataFrame,2,function(x) length(unique(x)))
#check dataset again
str(DataFrame)
ind = createDataPartition(riv$elv, p = 9/10, list = FALSE)
TrainDF <- riv[ind,]
TestDF <- riv[-ind,]
#We will be using the caret package for crossvalidation.Function
ControlParameters <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE,
classProbs = TRUE)
method("cv") #cross validation method
number = 10 #number of cross validations
classProbs =TRUE #model will save predictions for each class
#Lets choose the model parameters. Here we are choosing mtry of Random
#and choosing 3 values, you can choose another model also and its parameters in the function expand.grid
#which will create a grid of all combinations of parameters
parameterGrid <- expand.grid(mtry=c(2,3,4)) #check out video on this part again
#We will put the above parameter in the model below in trControl arguement
#and now fit the model using train function
#to know more about train function run ?train in console
modelRandom <- train(variable~.,
data = TrainDF,
method = "lm",
trControl = ControlParameters,
tuneGrid = parameterGrid)
#preProcess = c('center', 'scale')"can be removed")
#testvariable~. means we want to predict testvariable and ~. means by way of all other variables
#method="rf" means random forest model
#preProcess centers and scales data
#to know which models or methods are available other than random forest names(getModelInfo())
names(getModelInfo)
modelRandom
predictions <- predict(modelRandom, TestDF)
#check confusion matrix
t <- table(predictions = predictions, actual=TestDF$variable)
t
# 1. resample data.
# 2. dele opp datasettet i 10 biter
# 3. se hvordan estimering av 100 ?rs flom endrer seg ved bruk av forskjellige treningssett
# p?litelighets kriterie
setwd("D:/Master/Thesis/Data")
ams_data <-read.table("ams_and_fgp.txt",header=T,sep="\ ")
ams_data$station <- paste(ams_data$regine, ams_data$main, sep=".")
testriver <- ams_data[ams_data$station == 2.1,]
qqplot(testriver$daily_ams_dates, testriver$daily_ams.1)
resampled_data <- testriver[sample(nrow(testriver)),]
#Dataset is read in
#column "station" has been created to identify rivers based on 1 variable instead of two
#creates testriver dataframe consisting of all rows containing data from a given station
#(any way to do this for all stations simultaneously?)
#Data of testriver dataframe is resampled randomly
#try installing tidyverse
#install.packages("tydiverse", dependencies = TRUE)
#Maybe tydiverse will be useful later, now? not so much.
data_folds <- cut(seq(1, nrow(resampled_data)), breaks = 10, labels=FALSE)
#divides dataframe into 10 "equally" sized chunks, NB requires randomized dataset!
for(i in 1:10){
testIndexes <- which (data_folds == i, arr.ind = TRUE)
testData <- resampled_data[testIndexes, ]
trainData <- resampled_data[-testIndexes,]
}
library(car)
library(lme4)
library(caret)
#Create train and test dataset, target variable ??
library(caTools)
indices = createDataPartition(testriver$daily_ams.1, p = 8/10, list = FALSE)
TrainDF <- testriver[indices,]
TestDF <- testriver[-indices,]
#We will be using the caret package for crossvalidation.Function
ControlParameters <- trainControl(method = "cv",
number = 10,
savePredictions = TRUE,
classProbs = TRUE)
method("cv") #cross validation method
number = 10 #number of cross validations
classProbs =TRUE #model will save predictions for each class
#Lets choose the model parameters. Here we are choosing mtry of Random
#and choosing 3 values, you can choose another model also and its parameters in the function expand.grid
#which will create a grid of all combinations of parameters
parameterGrid <- expand.grid(mtry=c(1,2,3,4,5,6)) #check out video on this part again
#We will put the above parameter in the model below in trControl arguement
#and now fit the model using train function
#to know more about train function run ?train in console
modelRandom <- train(daily_ams.1~.,
data = TrainDF,
method = "lm",
trControl = ControlParameters,
tuneGrid = parameterGrid,
na.action = na.exclude)
#preProcess = c('center', 'scale')"can be removed")
#testvariable~. means we want to predict testvariable and ~. means by way of all other variables
#method="rf" means random forest model
#preProcess centers and scales data
#to know which models or methods are available other than random forest names(getModelInfo())
names(getModelInfo)
modelRandom
predictions <- predict(modelRandom, TestDF)
rmse <- function()
{
sqrt(mean(error^2))
}
MAE(pred = trainData, obs = testData, na.rm = TRUE)
hist(resampled_data$daily_ams.1)
install.packages("devtools")
library(devtools)
install_github("NVE/fitdistrib")
install.packages('shiny')
library(shiny)
install.packages("glogis")
install.packages("tibble")
install.packages("rlang")
install_github("NVE/FlomKart_ShinyApp")
install_github("NVE/FlomKart")
install.packages("plotrix")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
